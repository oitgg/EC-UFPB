Função da tabela de ocorrencia
-Função Huffman_init()
Bloco de memória setado pra ter no máximo 256 bytes de dados
Dentro dos blocos: dados e tamanho
Quando um bloco é incrementado, o tamanho dele e a frequencia de ocorrencias são incrementadas também a partir da contagem de bytes
Chama a função de compressão
Busca e adiciona as ocorrências na árvore







Função da Árvore
A árvore é inicializada
Um novo nó é adicionado. Ele contém ponteiros para esquerda e direita e para o pai.
Um nó contém as informações: índice, byte armazenado, frequencia de ocorrencia, se é folha ou não. 
Os nós são adicionados a partir de Insertion Sort. Os nós são armazenados num array e comparados para saber qual o maior e qual a maior posição dentre eles.
Para cada novo nó, a frequência de ocorrência é incrementada.

-Códigos de profundidade
Os códigos são gerados a partir do incremento de novas entradas na lista de ocorrência. 
Os dois elementos de menor frequência de ocorrência são considerados como folha, e um pai é criado para os dois, que contém o valor da soma das frequências do filho.
Esse processo é repetido até apenas um elemento restar na árvore. Esse elemento será a raíz.
A partir de DFS (Depth-First-Search) PreOrder os códigos de Huffman são encontrados.
A partir de DFS (Depth_First-Search) PostOrfer os nós são visitados para descompressão.


1) a árvore é incializada
2) a conta de frequências é feita
3) a árvore é construída
4) os códigos são gerados







Função de Compressão
-Função BitWriter()
O bitwriter cria um escritor que deve ser usado para escrever os dados a serem comprimidos num arquivo de saída. São armazenados em um buffer.
Cada bit escrito no arquivo, é adicionado diretamente no buffer. Um header é criado para identificação posterior e agrupamento dos bits escritos no buffer.
Cada byte escrito, é lançado no header/buffer e sua frequência é lançada no contador.
O último byte pode ter zeros na direita, então um novo byte é escrito no final só pra dizer quantos bits são validos no último byte dos dados comprimidos.
writer->buffer <<= 1; (shifta o buffer em uma posição)
writer->buffer |= bit; (seta o valor do bit na posição apropriada)
writer->bit_number++; (adiciona o bit no buffer)
Caso o buffer esteja cheio, ele será descarregado no arquivo.

Escreve uma stream (corrente) de bits no arquivo.
Força a escrita de todo o conteúdo do buffer para o arquivo.
Descarrega o buffer e fecha o escritor.









Função de Descompressão
-Função BitReader()
O bitreader cria um leitor que deve ser usado para ler os dados comprimidos, que estão armazenados no buffer.
O ultimo byte dos dados deve ter zeros na direita que não são significantes.
Então o leitor vai ler o ultimo byte do arquivo para indicar quantos bits tem no ultimo byte dos dados.
A função é executada até o fim do arquivo ser alcançado.
Após isso, o leitor é encerrado.

A leitura começa pelo header, que está armazenado num buffer.
No processo de leitura, a partir do header, a árvore de Huffman é reconstruída.
A procura (DFS) vai até o nó correspondente ao código armazenado.
Os dados reversos à inserção são alocados em um buffer, que vai armazenando até sua capacidade máxima.
Quando sua capacidade máxima é atingida, um realocamento de memória é executado.
O conteúdo vai sendo escrito de forma gradativa juntamente com as descargas do buffer.